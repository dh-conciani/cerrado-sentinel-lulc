
// define string to use as label metadata
var bioma = "CERRADO"    
var versao = "31"       

// define output directory
var dirout = 'projects/mapbiomas-workspace/AMOSTRAS/Cerrado/col6/training-sentinel/'

// define surface reflectance mosaic assets
var dirasset = 'projects/nexgenmap/MapBiomas2/SENTINEL/mosaics'             

// import classification regions
var regioesCollection = ee.FeatureCollection('projects/mapbiomas-workspace/AUXILIAR/CERRADO/cerrado_regioes_c6')

// import sample points (generated by step 3)
var pts = ee.FeatureCollection('projects/mapbiomas-workspace/AMOSTRAS/Cerrado/col6/samples-sentinel/samples_beta_CERRADO_v31')

// import biomes raster
var biomes = ee.Image('projects/mapbiomas-workspace/AUXILIAR/biomas-2019-raster')
// select only cerrado raster
var bioma250mil_CE = biomes.mask(biomes.eq(4))

// surface reflectance bandnames
var bandNames = ee.List([
          'blue_median', 'blue_median_wet', 'blue_median_dry', 'blue_min', 'blue_stdDev', 
          'green_median', 'green_median_dry', 'green_median_wet', 'green_median_texture', 'green_min', 'green_stdDev',
          'red_median', 'red_median_dry', 'red_min', 'red_median_wet', 'red_stdDev', 
          'nir_median', 'nir_median_dry', 'nir_median_wet', 'nir_min', 'nir_stdDev',
          'swir1_median', 'swir1_median_dry', 'swir1_median_wet', 'swir1_min', 'swir1_stdDev', 
          'swir2_median', 'swir2_median_wet', 'swir2_median_dry', 'swir2_min', 'swir2_stdDev', 
          'ndvi_median_dry', 'ndvi_median_wet', 'ndvi_median', 'ndvi_amp', 'ndvi_stdDev', 
          'ndwi_median', 'ndwi_median_dry', 'ndwi_median_wet', 'ndwi_amp', 'ndwi_stdDev',
          'evi2_median', 'evi2_median_dry', 'evi2_median_wet', 'evi2_amp', 'evi2_stdDev',
          'savi_median_dry', 'savi_median_wet', 'savi_median', 'savi_stdDev',
          'pri_median_dry', 'pri_median', 'pri_median_wet', 
          'gcvi_median', 'gcvi_median_dry', 'gcvi_median_wet', 'gcvi_stdDev',
          'hallcover_median', 'hallcover_stdDev',
          'cai_median', 'cai_median_dry', 'cai_stdDev',
          'gv_median', 'gv_amp', 'gv_stdDev', 
          'gvs_median', 'gvs_median_dry', 'gvs_median_wet', 'gvs_stdDev',
          'npv_median', 
          'soil_median', 'soil_amp', 'soil_stdDev',
          'cloud_median', 'cloud_stdDev', 
          'shade_median', 'shade_stdDev', 
          'ndfi_median', 'ndfi_median_dry', 'ndfi_median_wet', 'ndfi_amp', 'ndfi_stdDev',
          'sefi_median', 'sefi_stdDev', 'sefi_median_dry', 
          'wefi_median', 'wefi_median_wet', 'wefi_amp', 'wefi_stdDev',
          'slope'
  ])
  

//define function to perform spectral signature extraction - training samples creation
// call each region in 'regioes_lista', store in 'regiao' by 'lista' 
var regiao = 16
var ano = 2020

// subset region
var limite = regioesCollection.filterMetadata('mapb', "equals", regiao).geometry().bounds()
       
// import sentinel mosaic 
var mosaicoCer = ee.ImageCollection(dirasset)
            .filterMetadata('biome', 'equals', bioma)
            .filterMetadata('version', 'equals', '1')
            
//compute latitude and longitude 
var ll = ee.Image.pixelLonLat().mask(bioma250mil_CE)
var long = ll.select('longitude').add(34.8).multiply(-1).multiply(1000).toInt16()
var lati = ll.select('latitude').add(5).multiply(-1).multiply(1000).toInt16()

// filter sentinel mosaic for the bounds of the region 
var mosaicoTotal = mosaicoCer.filterMetadata('year', 'equals', (ano))
            .filterBounds(limite)
            .mosaic()
        
//write year as pixel values and use as a additional band
mosaicoTotal = mosaicoTotal.addBands(long, ['longitude'])
                                   .addBands(lati, ['latitude'])
                                   .addBands(ee.Image(ano).int16().rename("year"))
                                   
// subset sample points by region
var pts_reg = pts.filterBounds(regioesCollection.filterMetadata('mapb', "equals", regiao))
print('number of points: ', pts_reg.size())

// extract signatures
var sampledPoints = pts_reg.map(
  
  function(feature) {
  return feature.set(mosaicoTotal.reduceRegion({
    reducer: 'mean',
    geometry: feature.geometry(),
    scale: 30
  }));
});

print (sampledPoints.first())
